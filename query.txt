-Roads to close:

match (t:Tag) where t.amenity in ["place_of_worship", "hospital", "police"]
match (t)<-[:TAGS]-()-[:MEMBER]->(:OSMWayNode)<-[:NEAR]-(j:RoadJunction)-[r:ROUTE]-()
set j.status = "closed", r.status = "closed"
return count(distinct j) as junctions, count(distinct r) as routes


-Reopen:

match (j:RoadJunction)-[r:ROUTE]-() set j.status = 'active', r.status = 'active'


-Projection:

CALL gds.graph.project.cypher(
                        "graph",
                        "MATCH (n:RoadJunction) where n.status = 'active' RETURN id(n) AS id, n.lat AS lat, n.lon AS lon",
                        "MATCH ()-[r:ROUTE]->() with min(r.AADT) as min_AADT,max(r.AADT) as max_AADT,max(r.distance) as max_dist,min(r.distance) as min_dist MATCH (n)-[r:ROUTE]->(m) WHERE r.status = 'active' RETURN id(n) AS source, id(m) AS target, 0.5 * toFloat((r.AADT-min_AADT)/(max_AADT-min_AADT)) + 0.5 * toFloat((r.distance-min_dist)/(max_dist-min_dist)) as traffic, r.AADT as AADT, r.distance as distance, type(r) as type")


-Approximate Average shortest path length & Diameter:

match (r1:RoadJunction {status: "active"}) with r1, rand() as rand order by rand limit 200
with collect(r1) as c1
match (r2:RoadJunction {status: "active"}) with c1, r2, rand() as rand order by rand limit 200
unwind c1 as r1
match (r1), (r2) where r1 <> r2
with r1, r2, rand() as rand
order by rand limit 10000
call gds.shortestPath.dijkstra.stream('graph', {
    relationshipTypes: ['ROUTE'],
    sourceNode: id(r1),
    targetNode: id(r2)
})
yield totalCost
return avg(totalCost) as average, max(totalCost) as max


-Approximate Average shortest path (distance based):

match (r1:RoadJunction {status: "active"}) with r1, rand() as rand order by rand limit 200
with collect(r1) as c1
match (r2:RoadJunction {status: "active"}) with c1, r2, rand() as rand order by rand limit 200
unwind c1 as r1
match (r1), (r2) where r1 <> r2
with r1, r2, rand() as rand
order by rand limit 10000
call gds.shortestPath.dijkstra.stream('graph', {
    relationshipTypes: ['ROUTE'],
    sourceNode: id(r1),
    targetNode: id(r2),
    relationshipWeightProperty: 'distance'
})
yield totalCost
return avg(totalCost) as average, max(totalCost) as max